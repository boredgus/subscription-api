// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"
	db "subscription-api/internal/db"

	mock "github.com/stretchr/testify/mock"

	sql "database/sql"
)

// Store is an autogenerated mock type for the Store type
type Store[Queries interface{}] struct {
	mock.Mock
}

type Store_Expecter[Queries interface{}] struct {
	mock *mock.Mock
}

func (_m *Store[Queries]) EXPECT() *Store_Expecter[Queries] {
	return &Store_Expecter[Queries]{mock: &_m.Mock}
}

// DB provides a mock function with given fields:
func (_m *Store[Queries]) DB() *sql.DB {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DB")
	}

	var r0 *sql.DB
	if rf, ok := ret.Get(0).(func() *sql.DB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.DB)
		}
	}

	return r0
}

// Store_DB_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DB'
type Store_DB_Call[Queries interface{}] struct {
	*mock.Call
}

// DB is a helper method to define mock.On call
func (_e *Store_Expecter[Queries]) DB() *Store_DB_Call[Queries] {
	return &Store_DB_Call[Queries]{Call: _e.mock.On("DB")}
}

func (_c *Store_DB_Call[Queries]) Run(run func()) *Store_DB_Call[Queries] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Store_DB_Call[Queries]) Return(_a0 *sql.DB) *Store_DB_Call[Queries] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Store_DB_Call[Queries]) RunAndReturn(run func() *sql.DB) *Store_DB_Call[Queries] {
	_c.Call.Return(run)
	return _c
}

// IsError provides a mock function with given fields: err, errCode
func (_m *Store[Queries]) IsError(err error, errCode db.Error) bool {
	ret := _m.Called(err, errCode)

	if len(ret) == 0 {
		panic("no return value specified for IsError")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(error, db.Error) bool); ok {
		r0 = rf(err, errCode)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Store_IsError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsError'
type Store_IsError_Call[Queries interface{}] struct {
	*mock.Call
}

// IsError is a helper method to define mock.On call
//   - err error
//   - errCode db.Error
func (_e *Store_Expecter[Queries]) IsError(err interface{}, errCode interface{}) *Store_IsError_Call[Queries] {
	return &Store_IsError_Call[Queries]{Call: _e.mock.On("IsError", err, errCode)}
}

func (_c *Store_IsError_Call[Queries]) Run(run func(err error, errCode db.Error)) *Store_IsError_Call[Queries] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(error), args[1].(db.Error))
	})
	return _c
}

func (_c *Store_IsError_Call[Queries]) Return(_a0 bool) *Store_IsError_Call[Queries] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Store_IsError_Call[Queries]) RunAndReturn(run func(error, db.Error) bool) *Store_IsError_Call[Queries] {
	_c.Call.Return(run)
	return _c
}

// WithTx provides a mock function with given fields: ctx, f
func (_m *Store[Queries]) WithTx(ctx context.Context, f func(Queries) error) error {
	ret := _m.Called(ctx, f)

	if len(ret) == 0 {
		panic("no return value specified for WithTx")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, func(Queries) error) error); ok {
		r0 = rf(ctx, f)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Store_WithTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithTx'
type Store_WithTx_Call[Queries interface{}] struct {
	*mock.Call
}

// WithTx is a helper method to define mock.On call
//   - ctx context.Context
//   - f func(Queries) error
func (_e *Store_Expecter[Queries]) WithTx(ctx interface{}, f interface{}) *Store_WithTx_Call[Queries] {
	return &Store_WithTx_Call[Queries]{Call: _e.mock.On("WithTx", ctx, f)}
}

func (_c *Store_WithTx_Call[Queries]) Run(run func(ctx context.Context, f func(Queries) error)) *Store_WithTx_Call[Queries] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(func(Queries) error))
	})
	return _c
}

func (_c *Store_WithTx_Call[Queries]) Return(_a0 error) *Store_WithTx_Call[Queries] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Store_WithTx_Call[Queries]) RunAndReturn(run func(context.Context, func(Queries) error) error) *Store_WithTx_Call[Queries] {
	_c.Call.Return(run)
	return _c
}

// NewStore creates a new instance of Store. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStore[Queries interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *Store[Queries] {
	mock := &Store[Queries]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
