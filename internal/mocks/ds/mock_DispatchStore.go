// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"
	db "subscription-api/internal/db"
	ds "subscription-api/internal/db/dispatch"

	mock "github.com/stretchr/testify/mock"

	sql "database/sql"
)

// DispatchStore is an autogenerated mock type for the DispatchStore type
type DispatchStore struct {
	mock.Mock
}

type DispatchStore_Expecter struct {
	mock *mock.Mock
}

func (_m *DispatchStore) EXPECT() *DispatchStore_Expecter {
	return &DispatchStore_Expecter{mock: &_m.Mock}
}

// CreateSubscriber provides a mock function with given fields: ctx, email
func (_m *DispatchStore) CreateSubscriber(ctx context.Context, email string) error {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for CreateSubscriber")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DispatchStore_CreateSubscriber_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSubscriber'
type DispatchStore_CreateSubscriber_Call struct {
	*mock.Call
}

// CreateSubscriber is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *DispatchStore_Expecter) CreateSubscriber(ctx interface{}, email interface{}) *DispatchStore_CreateSubscriber_Call {
	return &DispatchStore_CreateSubscriber_Call{Call: _e.mock.On("CreateSubscriber", ctx, email)}
}

func (_c *DispatchStore_CreateSubscriber_Call) Run(run func(ctx context.Context, email string)) *DispatchStore_CreateSubscriber_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *DispatchStore_CreateSubscriber_Call) Return(_a0 error) *DispatchStore_CreateSubscriber_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DispatchStore_CreateSubscriber_Call) RunAndReturn(run func(context.Context, string) error) *DispatchStore_CreateSubscriber_Call {
	_c.Call.Return(run)
	return _c
}

// DB provides a mock function with given fields:
func (_m *DispatchStore) DB() *sql.DB {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DB")
	}

	var r0 *sql.DB
	if rf, ok := ret.Get(0).(func() *sql.DB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.DB)
		}
	}

	return r0
}

// DispatchStore_DB_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DB'
type DispatchStore_DB_Call struct {
	*mock.Call
}

// DB is a helper method to define mock.On call
func (_e *DispatchStore_Expecter) DB() *DispatchStore_DB_Call {
	return &DispatchStore_DB_Call{Call: _e.mock.On("DB")}
}

func (_c *DispatchStore_DB_Call) Run(run func()) *DispatchStore_DB_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DispatchStore_DB_Call) Return(_a0 *sql.DB) *DispatchStore_DB_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DispatchStore_DB_Call) RunAndReturn(run func() *sql.DB) *DispatchStore_DB_Call {
	_c.Call.Return(run)
	return _c
}

// GetDispatch provides a mock function with given fields: ctx, id
func (_m *DispatchStore) GetDispatch(ctx context.Context, id string) (ds.DispatchData, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetDispatch")
	}

	var r0 ds.DispatchData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (ds.DispatchData, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) ds.DispatchData); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(ds.DispatchData)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DispatchStore_GetDispatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDispatch'
type DispatchStore_GetDispatch_Call struct {
	*mock.Call
}

// GetDispatch is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *DispatchStore_Expecter) GetDispatch(ctx interface{}, id interface{}) *DispatchStore_GetDispatch_Call {
	return &DispatchStore_GetDispatch_Call{Call: _e.mock.On("GetDispatch", ctx, id)}
}

func (_c *DispatchStore_GetDispatch_Call) Run(run func(ctx context.Context, id string)) *DispatchStore_GetDispatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *DispatchStore_GetDispatch_Call) Return(_a0 ds.DispatchData, _a1 error) *DispatchStore_GetDispatch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DispatchStore_GetDispatch_Call) RunAndReturn(run func(context.Context, string) (ds.DispatchData, error)) *DispatchStore_GetDispatch_Call {
	_c.Call.Return(run)
	return _c
}

// IsError provides a mock function with given fields: err, errCode
func (_m *DispatchStore) IsError(err error, errCode db.Error) bool {
	ret := _m.Called(err, errCode)

	if len(ret) == 0 {
		panic("no return value specified for IsError")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(error, db.Error) bool); ok {
		r0 = rf(err, errCode)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// DispatchStore_IsError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsError'
type DispatchStore_IsError_Call struct {
	*mock.Call
}

// IsError is a helper method to define mock.On call
//   - err error
//   - errCode db.Error
func (_e *DispatchStore_Expecter) IsError(err interface{}, errCode interface{}) *DispatchStore_IsError_Call {
	return &DispatchStore_IsError_Call{Call: _e.mock.On("IsError", err, errCode)}
}

func (_c *DispatchStore_IsError_Call) Run(run func(err error, errCode db.Error)) *DispatchStore_IsError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(error), args[1].(db.Error))
	})
	return _c
}

func (_c *DispatchStore_IsError_Call) Return(_a0 bool) *DispatchStore_IsError_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DispatchStore_IsError_Call) RunAndReturn(run func(error, db.Error) bool) *DispatchStore_IsError_Call {
	_c.Call.Return(run)
	return _c
}

// SubscribeFor provides a mock function with given fields: _a0, _a1
func (_m *DispatchStore) SubscribeFor(_a0 context.Context, _a1 ds.SubscribeForParams) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for SubscribeFor")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ds.SubscribeForParams) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DispatchStore_SubscribeFor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubscribeFor'
type DispatchStore_SubscribeFor_Call struct {
	*mock.Call
}

// SubscribeFor is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 ds.SubscribeForParams
func (_e *DispatchStore_Expecter) SubscribeFor(_a0 interface{}, _a1 interface{}) *DispatchStore_SubscribeFor_Call {
	return &DispatchStore_SubscribeFor_Call{Call: _e.mock.On("SubscribeFor", _a0, _a1)}
}

func (_c *DispatchStore_SubscribeFor_Call) Run(run func(_a0 context.Context, _a1 ds.SubscribeForParams)) *DispatchStore_SubscribeFor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ds.SubscribeForParams))
	})
	return _c
}

func (_c *DispatchStore_SubscribeFor_Call) Return(_a0 error) *DispatchStore_SubscribeFor_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DispatchStore_SubscribeFor_Call) RunAndReturn(run func(context.Context, ds.SubscribeForParams) error) *DispatchStore_SubscribeFor_Call {
	_c.Call.Return(run)
	return _c
}

// WithTx provides a mock function with given fields: ctx, f
func (_m *DispatchStore) WithTx(ctx context.Context, f func(ds.DispatchQueries) error) error {
	ret := _m.Called(ctx, f)

	if len(ret) == 0 {
		panic("no return value specified for WithTx")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, func(ds.DispatchQueries) error) error); ok {
		r0 = rf(ctx, f)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DispatchStore_WithTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithTx'
type DispatchStore_WithTx_Call struct {
	*mock.Call
}

// WithTx is a helper method to define mock.On call
//   - ctx context.Context
//   - f func(ds.DispatchQueries) error
func (_e *DispatchStore_Expecter) WithTx(ctx interface{}, f interface{}) *DispatchStore_WithTx_Call {
	return &DispatchStore_WithTx_Call{Call: _e.mock.On("WithTx", ctx, f)}
}

func (_c *DispatchStore_WithTx_Call) Run(run func(ctx context.Context, f func(ds.DispatchQueries) error)) *DispatchStore_WithTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(func(ds.DispatchQueries) error))
	})
	return _c
}

func (_c *DispatchStore_WithTx_Call) Return(_a0 error) *DispatchStore_WithTx_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DispatchStore_WithTx_Call) RunAndReturn(run func(context.Context, func(ds.DispatchQueries) error) error) *DispatchStore_WithTx_Call {
	_c.Call.Return(run)
	return _c
}

// NewDispatchStore creates a new instance of DispatchStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDispatchStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *DispatchStore {
	mock := &DispatchStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
