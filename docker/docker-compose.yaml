version: 2.27.0
name: subscription-api

services:
  api:
    container_name: ${API_ADDRESS}
    build:
      context: ../.
      dockerfile: docker/Dockerfile.subscription-api
    ports:
      - ${API_PORT}:${API_PORT}
    env_file:
      - default.env
    depends_on:
      currency-service:
        condition: service_started
      dispatch-service:
        condition: service_started
    
  currency-service:
    container_name: ${CURRENCY_SERVICE_ADDRESS}
    build:
      context:  ../.
      dockerfile: docker/Dockerfile.currency-service
    ports:
      - ${CURRENCY_SERVICE_PORT}:${CURRENCY_SERVICE_PORT}
    env_file:
      - default.env

  dispatch-service:
    container_name: ${DISPATCH_SERVICE_ADDRESS}
    build:
      context:  ../.
      dockerfile: docker/Dockerfile.dispatch-service
    ports:
      - ${DISPATCH_SERVICE_PORT}:${DISPATCH_SERVICE_PORT}
    env_file:
      - default.env
    depends_on:
      currency-service:
        condition: service_started
      database:
        condition: service_healthy
      

#   mailimg-daemon:
#     container_name: ${MAILING_DAEMON_CONTAINER}
#     build:
#       context: ../.
#       dockerfile: Dockerfile.mailing-daemon
#     ports:
#       - ${MAILING_DAEMON_PORT}:${MAILING_DAEMON_PORT}
#     depends_on:
#       - serviceName
  
  database:
    container_name: ${POSTGRESQL_ADDRESS}
    image: postgres:16.2-bullseye
    ports:
      - ${POSTGRESQL_PORT}:${POSTGRESQL_PORT}
    environment:
      - POSTGRES_DB=${POSTGRESQL_DB}
      - POSTGRES_USER=${POSTGRESQL_USER}
      - POSTGRES_PASSWORD=${POSTGRESQL_PASSWORD}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-d", "subs", "-U", "postgres"]
      interval: 5s
      timeout: 20s

volumes:
  postgres-data:
    
# secrets:
#   prod-env:
#     file: .env
  